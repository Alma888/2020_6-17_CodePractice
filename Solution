# 2020_6-17_CodePractice
//标题：二叉树的镜像
//        操作给定的二叉树，将其变换为源二叉树的镜像。
// 【输入描述】：二叉树的镜像定义：源二叉树
//                       8
//                      / \
//                     6 10
//                   / \ / \
//                  5 7 9 11
// 【输出描述】： 镜像二叉树
//                      8
//                     / \
//                    10 6
//                  / \ / \
//                11 9 7 5

//【解题思路】通过图可以看出，源二叉树镜面成像变成镜像二叉树。 
//          一个节点的左右节点进行互换，可以通过递归来实现。
class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;
    }
}

public class Solution {
    public void Mirror(TreeNode root){
        if(root==null){
            return;
        }
        if(root.left==null&&root.right==null){
            return;
        }
        TreeNode pTemp=root.left;
        root.left=root.right;
        root.right=pTemp;

        if(root.left!=null){
            Mirror(root.left);
        }
        if(root.right!=null){
            Mirror(root.right);
        }
    }
}
